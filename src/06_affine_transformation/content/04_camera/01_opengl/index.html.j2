= Camera and OpenGL

* In OpenGL: no real notion of __"camera"__
::[font-size:85%; color:gray; line-height:1.3em; font-style:italic;]
** Unique viewpoint - cube \((x,y,z)\in[-1,1]^3\) - Normalized Device Coordinate
** Left-right/x, Bottom-up/y, Front-back/z (toward negative z)
** No perspective (displays (x,y) for the smallest z)
::

::[height:1em;]::

::[width:1000px;]
* Any __camera effect__ (position, orientation, perspective) 
** must be coded "manually" in the shader.
::[font-size:85%; color:gray; line-height:1.3em; font-style:italic;]
** All these effects can be represented as matrices.
::
::

::[height:1em;]::

* Three common matrices
** **Model** matrix
::[font-size:85%; color:gray; line-height:1.3em; font-style:italic;]
*** Affine transform - specific to a shape.
*** Local object coordinates to world space.
::
** **View** matrix
::[font-size:85%; color:gray; line-height:1.3em; font-style:italic;]
*** Rigid transform - position/orientation of the camera in the scene.
*** World space to camera/view/eye space
::
** **Projection** matrix
::[font-size:85%; color:gray; line-height:1.3em; font-style:italic;]
*** Perspective matrix - map frustum to normalized cube. (/or ortho projection)
*** Camera space to Normalized Device Coordinate (clip/screen space)
::

::[height:0.5em;]::

::[font-size:85%; position:fixed; top:650px; left:800px;]
** \(p = Projection \times \underbrace{View \times Model}_{ModelView} \times p_0\)
::

::[position:fixed; top:225px; left:1300px;]
img::assets/view_space.png[width:550px;]
::











